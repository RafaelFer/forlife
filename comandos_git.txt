Autor: Rafael

Comandos git:

git init      : Inicia um Repositório na pasta quem que o comando foi executado
git ls-files  : Mostra os arquivos controlados pelo git.
git status    : Lista todos os arquivos que estão sendo tradados e não pelo git, e suas modificações
git add       : adiciona arquivos no git (que podem ser commitados)
git commit -m : Commita no repositorio ( -m é para passar uma mensagem em  -m "Primeiro Commit")

git config user.name  : configura usuario para o git, se nao for global configura apenas para o repositorio presente
git config user.email : configura email para o git, se nao for global configura apenas para o repositorio presente

Obs1: Toda vez que voce adicionar um arquivo e comita-lo, caso faça alguma alteração, é preciso adiciona-lo novamente e para então commitar a alteração.

git log -p: Informa os logs dos commits, com dados do usuario, dados mensagens e tudo mais.
git whatchanged -p: Mesma idéia do Log só que com muitos mais detalhes. (-p Mostra os dados alterados em cada arquivo).
-p mostra as linhas que houveram modificacoes

#Remoto 
git remote : Lista os repositorios remotos
git remote add NOME URL : Adiciona um repositorio remote com o nome que vc escolher e passando o caminho do repositorio.

git clone URL : Faz donwload do repositorio online para sua maquina.

git push NOMEREPOSITORIO NOMEBRANCH : Commita os dados depois de adicionasdos e commitados no git, envia pa o repositorio.

<<<<<<< HEAD
git branch -a : lista todas as branchs remotas e nao
=======
#Branchs

git branch : Lista as branches
git branch nomedabranch : cria uma branch nova
git checkout nomedabranch : troca de branch

Obs2: Quando se cria uma branch, ela herda tudo da master...



>>>>>>> iniciando design

git branch -d : Deleta a branch, se for precisar forçar tem que usar o -D

git push -u nomerepositorio nomebranch : com -u criamos uma branch remota no e ja vinculamos ela a branch remota com mesmo nome

git push -d nomerepositorio nomebranch : deleta a branch remota

git fetch nomedorepositorio : este comando verifica todas as atualizações que foram realizadas no repositorio 


git mergetool --tool-help : Lista alguns programas para se fazer merge com interface gráfica
git mergetool -t nome_do_programa : para instalar o programa


Isso acontece quando gera conflito e o git não consegue fazer merge automatico, então é necessário a abertura do arquivo e o merge manual.    

git checkout -b nomedabranch : Cria uma branch e já muda para a branch criada.

#Trabalhando com branchs...Sempre crie uma nova branch, trabalhe nessa branch local, após commitar os dados volter para a branch master e faça o merge.

git merge nomedabranchQueDesejaFazerOMerger : quando vc estiver na master e utilzar este comando, ele vai fazer o merge com a branch que vc informar.

git rebase nomedabranchemaster nomedabranchedesenvolvimento : este comando tras os dados de uma branch master para uma branch filha, e atualiza a branch filha com todos os dados adicionados na branch pai.

Obs3: Quando voce está fazendo um rabase e acontece um conflito, o git cria uma branch temporaria chamada "no branch" para que voce possa tratar os conflitos.

O Comando rebase tem alguns outros comandos, são eles: --continue, --skip e --abort --continue deve ser utilizado após a resolução manual de conflitos; --skip faz com que suas alterações sejam descartadas; --abort volta atrás em todo o processo de rebase.


git stash : coloca em um pilha de memoria qualquer alteracao que vc nao queira commitar naquele momento.
git stash pop: coloca denovo no controle do git 
git stash list: mostra a lista que esta em stash.

git stash apply : restaura o stash passando o numero do apply... (obtido na list)
git stash drop : dropa o stash que esta no list

final teste

git checkout nomedoArquivo : desfaz o que esta comitado e deixa o arquivo igual ao do repositorio remoto.

git reset HEAD nomedoarquivo : se vc alterou o arquivo e ja deu um add e quer voltar, esse comando volta o arquivo para o ultimo commit, no caso pelo comando head.

git reset HAShDoCommit : Isso faz com que o arquivo volte a ser como no commit do hash que vc passou. (Seu arquivo fica igual como vc fez...)

git revert HAShdoCommit : Esse comando retira um unico commit, sem alterar os commits posteriores a ele.... ex: comit1, comit2, SAIU1commit, commit4, commit5...

#BISECT 

Bisect consegue filtrar commits, filtrando o commit ruim e bom... para usa-lo é preciso usar o start passando comando:

git bisect start : Starta o modo bisect.

git bisect bad HEAD : commit atual é o ruim....
git bisect good HASHdoCommit : commit bom 

Nesse momento o bisect começa restaurar o arquivo com os commits do intervalo, e sempre pergunta se esta bom pra voce
quando vc achar um commit good, ele avançara para frente filtrando mais ainda o intervalor de commits.quando sobrar apenas 1 commit, ele retornara o hash deste commit.

git reset --hard : Com este comando, as alterações são removidas do histórico local de commits e também tanto do index quanto do working directory, permanentemente.

git reset --soft : Com este comando, as alterações são removidas do histórico local de commits, mas não são removidas do index.

git reset Com este comando, as alterações são removidas do histórico local de commits, do index, mas não doworking directory`.

Ao digitarmos HEAD~ seguido de um número inteiro n, será feita uma referência ao n-ésimo commit anterior ao HEAD. Por exemplo, HEAD~1, faz referência ao penúltimo commit e HEAD~2, ao antepenúltimo. No caso específico do penúltimo commit, também pode-se referenciá-lo utilizando o atalho HEAD^
<<<<<<< HEAD

Criando alias com git:

abrir arquivo gitconfig localizado em ~/ criar um alias [alias] e começar as referencias ex:
st = status    > git st  =   git status

soltar vários comandos ao mesmo tempo: 

envia = git checkout master && git pull &&rebase master && (é preciso passar !) antes do comando, desta forma o git ira executar os comandos em sequencia 
	

git log --pretty=oneline  : mostra um commit por linha!
git log --pretty=short  : igual ao log normal mas sem a data
git log --pretty=full : pega o commit original, e o commit que subiu para r

git log -p  : Mostra os logs e as alterações de cada arquivo
git log --stat : mostra o arquivo que foi alterado de forma resumida.

github fork : quando vc quer colaborar para algum projeto opensource, vc vai no projeto que deseja colaborar, clica em fork e esse projeto é copiado autimaticamente para o seu repositorio, após isso vc pode dar um git clone diretamente no seu repositorio.

pull resquest : vc cria um commit no seu rep, como esta com fork em outro projeto, vc da um pull request e solicita ao dono do rep que ele autorize o seu request no projeto atual...	

Para realizar esse processo via interface git, é só dar um clone no repositorio original e depois ficar fazendo pull do original para sua master

git diff  branch/branch : mostra as diferencas

git log --graph : mostra no repositorio os caminhos que a branch foi seguindo...

git cherry-prick hashDoCommit : puxa para a branch master apenas o commit da branch desenvolvimento, deixando todo o resgante deboa (merge manual).

é possivel passar vários hash para recuperar no cherrypic

Para usar uma ferramenta grafica, é possível iniciar uma ferramente grafica chamada git cola.

=======
>>>>>>> 23f267ef699b53ebd0cd4b28b01e4148835ebe00

teste
